#!/usr/bin/env sh

set -x

base_instance="/tmp/transfer/minimal-postgres-manifest.yaml"

# Read current values from the provided resource request
name="$(yq eval '.metadata.name' /kratix/input/object.yaml)"
namespace="$(yq eval '.spec.namespace // "default"' /kratix/input/object.yaml)"

env_type="$(yq eval '.spec.env // "dev"' /kratix/input/object.yaml)"
team="$(yq eval '.spec.teamId // "acid"' /kratix/input/object.yaml)"
dbname="$(yq eval '.spec.dbName // "postgres"' /kratix/input/object.yaml)"

instance_name="${team}-${name}-postgresql"

backup="false"
size="1Gi"
instances="1"
if [ $env_type = "prod" ]; then
  backup="true"
  size="10Gi"
  instances="3"
fi

export DEPLOYED_BY=$(yq eval '.spec.deployedBy' /kratix/input/object.yaml)

# Replace defaults with user provided values
cat ${base_instance} |
  yq eval "
    .metadata.labels.deployedBy = env(DEPLOYED_BY) |
    .metadata.namespace = \"${namespace}\" |
    .metadata.name = \"${instance_name}\" |
    .spec.enableLogicalBackup = ${backup} |
    .spec.teamId = \"${team}\" |
    .spec.volume.size = \"${size}\" |
    .spec.numberOfInstances = ${instances} |
    .spec.users = {\"${team}\": [\"superuser\", \"createdb\"]} |
    .spec.databases = {\"$dbname\": \"$team\"} |
    del(.spec.preparedDatabases)
  " - > /kratix/output/postgres-instance.yaml
